/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 DeNA Co., Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/// <reference path="base.js"/>

/**
 * A class that provides interpolation methods used by tweens.
 * @constructor
 */
createjs.Ease = function() {
};

/**
 * An interface that provides an interpolation method (a.k.a. an easing method)
 * used by tweens.
 * @interface
 */
createjs.Ease.Delegate = function() {};

/**
 * Returns the interpolated value.
 * @param {number} t
 * @return {number}
 */
createjs.Ease.Delegate.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
};

/**
 * A class that implements the linear-interpolation method used by tweens.
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.Linear = function() {
};

/** @override */
createjs.Ease.Linear.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  return t;
};

/**
 * A class that implements the interpolation method generated by Flash Pro.
 * @param {number} amount
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.FlashPro = function(amount) {
  /// <param type="number" name="amount"/>
  createjs.assert(amount != 0);

  /**
   * @const {number}
   * @private
   */
  this.amount_ = amount;
};

/** @override */
createjs.Ease.FlashPro.prototype.interpolate = function(t) {
  if (this.amount_ < 0) {
    return t * (t * -this.amount_ + 1 + this.amount_);
  }
  return t * ((2 - t) * this.amount_ + (1 - this.amount_));
};

/**
 * A specialized class of the createjs.Ease.FlashPro class with its amount 1,
 * which is used by games very often.
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.FlashProOne = function() {
};

/** @override */
createjs.Ease.FlashProOne.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  return t * (2 - t);
};

/**
 * A class that implements the polynomial-in interpolation method of the
 * specified degree as shown in the following graph.
 *
 *   f(t) ^
 *        |                   *
 *        |                   *
 *        |                   *
 *        |                   *
 *        |                  *
 *        |                  *
 *        |                 *
 *        |               **
 *        |          *****
 *        ***********---------> t
 *
 * @param {number} pow
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.PowIn = function(pow) {
  /// <param type="number" name="pow"/>
  /**
   * @const {number}
   * @private
   */
  this.pow_ = pow;
};

/** @override */
createjs.Ease.PowIn.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  return Math.pow(t, this.pow_);
};

/**
 * A class that implements the polynomial-out interpolation method of the
 * specified degree as shown in the following graph.
 *
 *   f(t) ^
 *        *
 *        *
 *        *
 *        *
 *        |*
 *        |*
 *        | *
 *        |  **
 *        |    *****
 *        ----------*********-> t
 *
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.PowOut = function(pow) {
  /// <param type="number" name="pow"/>
  /**
   * @const {number}
   * @private
   */
  this.pow_ = pow;
};

/** @override */
createjs.Ease.PowOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  return 1 - Math.pow(1 - t, this.pow_);
};

/**
 * A class that implements the polynomial-in-and-out interpolation method of the
 * specified degree as shown in the following graph.
 *
 *   f(t) ^
 *        |              ******
 *        |            **
 *        |           *
 *        |          *
 *        |         *
 *        |         *
 *        |        *
 *        |       *
 *        |     **
 *        ******--------------> t
 *
 * @param {number} pow
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.PowInOut = function(pow) {
  /// <param type="number" name="pow"/>
  /**
   * @const {number}
   * @private
   */
  this.pow_ = pow;
};

/** @override */
createjs.Ease.PowInOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  t *= 2;
  if (t < 1) return 0.5 * Math.pow(t, this.pow_);
  return 1 - 0.5 * Math.abs(Math.pow(2 - t, this.pow_));
};

/**
 * A class that implements the quadratic-in interpolation method. (This class is
 * the specialized class of the createjs.Ease.PowIn class with its degree 2.)
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.QuadIn = function() {
};

/** @override */
createjs.Ease.QuadIn.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  return t * t;
};

/**
 * A class that implements the quadratic-out interpolation method. (This class
 * is the specialized class of the createjs.Ease.PowOut class with its degree
 * 2.)
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.QuadOut = function() {
};

/** @override */
createjs.Ease.QuadOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  var t_ = 1 - t;
  return 1 - t_ * t_;
};

/**
 * A class that implements the quadratic-in-and-out interpolation method. (This
 * class is the specialized class of the createjs.Ease.PowInOut class with its
 * degree 2.)
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.QuadInOut = function() {
};

/** @override */
createjs.Ease.QuadInOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  t *= 2;
  if (t < 1) return 0.5 * t * t;
  var t_ = 2 - t;
  return 1 - 0.5 * t_ * t_;
};

/**
 * A class that implements the cubic-in interpolation method. (This class is the
 * specialized class of the createjs.Ease.PowIn class with its degree 3.)
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.CubicIn = function() {
};

/** @override */
createjs.Ease.CubicIn.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  return t * t * t;
};

/**
 * A class that implements the cubic-out interpolation method. (This class is
 * the specialized class of the createjs.Ease.PowOut class with its degree 3.)
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.CubicOut = function() {
};

/** @override */
createjs.Ease.CubicOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  var t_ = 1 - t;
  return 1 - t_ * t_ * t_;
};

/**
 * A class that implements the cubic-in-and-out interpolation method. (This
 * class is the specialized class of the createjs.Ease.PowInOut class with its
 * degree 3.)
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.CubicInOut = function() {
};

/** @override */
createjs.Ease.CubicInOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  t *= 2;
  if (t < 1) return 0.5 * t * t * t;
  var t_ = 2 - t;
  return 1 - 0.5 * t_ * t_ * t_;
};

/**
 * A class that implements the 4th-degree-in polynomial interpolation method.
 * (This class is the specialized class of the createjs.Ease.PowIn class with
 * its degree 4.)
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.QuartIn = function() {
};

/** @override */
createjs.Ease.QuartIn.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  return t * t * t * t;
};

/**
 * A class that implements the 4th-degree-out polynomial interpolation method.
 * (This class is the specialized class of the createjs.Ease.PowOut class with
 * its degree 4.)
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.QuartOut = function() {
};

/** @override */
createjs.Ease.QuartOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  var t_ = 1 - t;
  return 1 - t_ * t_ * t_ * t_;
};

/**
 * A class that implements the 4th-degree-in-and-out polynomial interpolation
 * method. (This class is the specialized class of the createjs.Ease.PowInOut
 * class with its degree 4.)
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.QuartInOut = function() {
};

/** @override */
createjs.Ease.QuartInOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  t *= 2;
  if (t < 1) return 0.5 * t * t * t * t;
  var t_ = 2 - t;
  return 1 - 0.5 * t_ * t_ * t_ * t_;
};

/**
 * A class that implements the 5th-degree-in polynomial interpolation method.
 * (This class is the specialized class of the createjs.Ease.PowIn class with
 * its degree 5.)
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.QuintIn = function() {
};

/** @override */
createjs.Ease.QuintIn.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  return t * t * t * t * t;
};

/**
 * A class that implements the 5th-degree-out polynomial interpolation method.
 * (This class is the specialized class of the createjs.Ease.PowOut class with
 * its degree 5.)
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.QuintOut = function() {
};

/** @override */
createjs.Ease.QuintOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  var t_ = 1 - t;
  return 1 - t_ * t_ * t_ * t_ * t_;
};

/**
 * A class that implements the 5th-degree-in-and-out polynomial interpolation
 * method. (This class is the specialized class of the createjs.Ease.PowInOut
 * class with its degree 5.)
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.QuintInOut = function() {
};

/** @override */
createjs.Ease.QuintInOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  t *= 2;
  if (t < 1) return 0.5 * t * t * t * t * t;
  var t_ = 2 - t;
  return 1 - 0.5 * t_ * t_ * t_ * t_ * t_;
};

/**
 * A class that implements the trigonometric-in interpolation method.
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.SineIn = function() {
};

/** @override */
createjs.Ease.SineIn.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  return 1 - createjs.cos(t * 90);
};

/**
 * A class that implements the trigonometric-out interpolation method.
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.SineOut = function() {
};

/** @override */
createjs.Ease.SineOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  return createjs.sin(t * 90);
};

/**
 * A class that implements the trigonometric-in-and-out interpolation method.
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.SineInOut = function() {
};

/** @override */
createjs.Ease.SineInOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  return -0.5 * (createjs.cos(180 * t) - 1);
};

/**
 * A class that implements the back-in interpolation method.
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.BackIn = function(amount) {
  /**
   * @const {number}
   * @private
   */
  this.amount_ = amount;
};

/** @override */
createjs.Ease.BackIn.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  return t * t * ((this.amount_ + 1) * t - this.amount_);
};

/**
 * A class that implements the back-out interpolation method.
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.BackOut = function(amount) {
  /// <param type="number" name="amplitude"/>
  /**
   * @const {number}
   * @private
   */
  this.amount_ = amount;
};

/** @override */
createjs.Ease.BackOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
/// <returns type="number"/>
  return (--t * t * ((this.amount_ +1) * t +this.amount_) +1);
};

/**
 * A class that implements the back-in-and-out interpolation method.
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.BackInOut = function(amount) {
  /// <param type="number" name="amplitude"/>
  /**
   * @const {number}
   * @private
   */
  this.amount_ = amount * 1.525;
};

/** @override */
createjs.Ease.BackInOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  t *= 2;
  if (t < 1) {
    return 0.5 * (t * t * ((this.amount_ + 1) * t - this.amount_));
  } else {
    t -= 2;
    return 0.5 * (t * t * ((this.amount_ + 1) * t + this.amount_) + 2);
  };
};

/**
 * A class that implements the circular-in interpolation method.
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.CircIn = function() {
};

/** @override */
createjs.Ease.CircIn.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  return -(Math.sqrt(1 - t * t) - 1);
};

/**
 * A class that implements the circular-out interpolation method.
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.CircOut = function() {
};

/** @override */
createjs.Ease.CircOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  return Math.sqrt(1 - (--t) * t);
};

/**
 * A class that implements the circular-in-and-out interpolation method.
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.CircInOut = function() {
};

/** @override */
createjs.Ease.CircInOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  t *= 2;
  if (t < 1) {
    return -0.5 * (Math.sqrt(1 - t * t) - 1);
  } else {
    t -= 2;
    return 0.5 * (Math.sqrt(1 - t * t) + 1);
  }
};

/**
 * A class that implements the bounce-in interpolation method.
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.BounceIn = function() {
};

/** @override */
createjs.Ease.BounceIn.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  t = 1 - t;
  if (t < 1 / 2.75) {
    return 1 - (7.5625 * t * t);
  } else if (t < 2 / 2.75) {
    t -= 1.5 / 2.75;
    return 1 - (7.5625 * t * t + 0.75);
  } else if (t < 2.5 / 2.75) {
    t -= 2.25 / 2.75;
    return 1 - (7.5625 * t * t + 0.9375);
  } else {
    t -= 2.625 / 2.75;
    return 1 - (7.5625 * t * t + 0.984375);
  }
};

/**
 * A class that implements the bounce-out interpolation method.
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.BounceOut = function() {
};

/** @override */
createjs.Ease.BounceOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  if (t < 1 / 2.75) {
    return (7.5625 * t * t);
  } else if (t < 2 / 2.75) {
    t -= 1.5 / 2.75;
    return (7.5625 * t * t + 0.75);
  } else if (t < 2.5 / 2.75) {
    t -= 2.25 / 2.75;
    return (7.5625 * t * t + 0.9375);
  } else {
    t -= 2.625 / 2.75;
    return (7.5625 * t * t + 0.984375);
  }
};

/**
 * A class that implements the bounce-in-and-out interpolation method.
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.BounceInOut = function() {
};

/** @override */
createjs.Ease.BounceInOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  if (t < 0.5) {
    t = 1 - 2 * t;
    if (t < 1 / 2.75) {
      return (1 - (7.5625 * t * t)) * 0.5;
    } else if (t < 2 / 2.75) {
      t -= 1.5 / 2.75;
      return (1 - (7.5625 * t * t + 0.75)) * 0.5;
    } else if (t < 2.5 / 2.75) {
      t -= 2.25 / 2.75;
      return (1 - (7.5625 * t * t + 0.9375)) * 0.5;
    } else {
      t -= 2.625 / 2.75;
      return (1 - (7.5625 * t * t + 0.984375)) * 0.5;
    }
  } else {
    t = t * 2 - 1;
    if (t < 1 / 2.75) {
      return (7.5625 * t * t) * 0.5 + 0.5;
    } else if (t < 2 / 2.75) {
      t -= 1.5 / 2.75;
      return (7.5625 * t * t + 0.75) * 0.5 + 0.5;
    } else if (t < 2.5 / 2.75) {
      t -= 2.25 / 2.75;
      return (7.5625 * t * t + 0.9375) * 0.5 + 0.5;
    } else {
      t -= 2.625 / 2.75;
      return (7.5625 * t * t + 0.984375) * 0.5 + 0.5;
    }
  }
};

/**
 * A class that implements the elastic-in interpolation method.
 * @param {number} amplitude
 * @param {number} period
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.ElasticIn = function(amplitude, period) {
  /// <param type="number" name="amplitude"/>
  /// <param type="number" name="period"/>
  /**
   * @const {number}
   * @private
   */
  this.amplitude_ = amplitude;

  /**
   * @const {number}
   * @private
   */
  this.period_ = period;
};

/** @override */
createjs.Ease.ElasticIn.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  if (t == 0 || t == 1) {
    return t;
  }
  var M_2PI = 3.14159265358979323846264338327950288 * 2;  // Math.PI * 2;
  var s = this.period_ / M_2PI * Math.asin(1 / this.amplitude_);
  --t;
  return -(this.amplitude_ * Math.pow(2, 10 * t) * Math.sin((t - s) * M_2PI /
      this.period_));
};

/**
 * A class that implements the elastic-out interpolation method.
 * @param {number} amplitude
 * @param {number} period
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.ElasticOut = function(amplitude, period) {
  /// <param type="number" name="amplitude"/>
  /// <param type="number" name="period"/>
  /**
   * @const {number}
   * @private
   */
  this.amplitude_ = amplitude;

  /**
   * @const {number}
   * @private
   */
  this.period_ = period;
};

/** @override */
createjs.Ease.ElasticOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  if (t == 0 || t == 1) {
    return t;
  }
  var M_2PI = 3.14159265358979323846264338327950288 * 2;  // Math.PI * 2;
  var s = this.period_ / M_2PI * Math.asin(1 / this.amplitude_);
  return (this.amplitude_ * Math.pow(2, -10 * t) *
          Math.sin((t - s) * M_2PI / this.period_) + 1);
};

/**
 * A class that implements the elastic-in-and-out interpolation method.
 * @param {number} amplitude
 * @param {number} period
 * @implements {createjs.Ease.Delegate}
 * @constructor
 */
createjs.Ease.ElasticInOut = function(amplitude, period) {
  /// <param type="number" name="amplitude"/>
  /// <param type="number" name="period"/>
  /**
   * @const {number}
   * @private
   */
  this.amplitude_ = amplitude;

  /**
   * @const {number}
   * @private
   */
  this.period_ = period;
};

/** @override */
createjs.Ease.ElasticInOut.prototype.interpolate = function(t) {
  /// <param type="number" name="t"/>
  /// <returns type="number"/>
  var M_2PI = 3.14159265358979323846264338327950288 * 2;  // Math.PI * 2;
  var s = this.period_ / M_2PI * Math.asin(1 / this.amplitude_);
  t *= 2;
  if (t < 1) {
    --t;
    return -0.5 * (this.amplitude_ * Math.pow(2, 10 * t) *
                   Math.sin((t - s) * M_2PI / this.period_));
  } else {
    --t;
    return (this.amplitude_ * Math.pow(2, -10 * t) *
            Math.sin((t - s) * M_2PI / this.period_) * 0.5 + 1);
  }
};

/**
 * The global instance of the linear-interpolation function.
 * @const {createjs.Ease.Delegate}
 */
createjs.Ease.linear = new createjs.Ease.Linear();

/**
 * The global instance of the createjs.Ease.FlashPro class with its amount 1.
 * @const {createjs.Ease.FlashProOne}
 * @private
 */
createjs.Ease.flashProOne_ = new createjs.Ease.FlashProOne();

/**
 * Creates an interpolation object that emulates the easing function used by
 * Flash Pro.
 * @param {number} amount
 * @return {createjs.Ease.Delegate}
 */
createjs.Ease.get = function(amount) {
  if (amount == 0) {
    return createjs.Ease.linear;
  }
  if (amount >= 1) {
    return createjs.Ease.flashProOne_;
  }
  if (amount <= -0.99) {
    return createjs.Ease.quadIn;
  }
  return new createjs.Ease.FlashPro(amount);
};

/**
 * Creates a new createjs.Ease.PowIn instance. This method emulates the
 * createjs.Ease.getPowIn method of TweenJS.
 * @param {number} pow
 * @return {createjs.Ease.Delegate}
 */
createjs.Ease.getPowIn = function(pow) {
  return new createjs.Ease.PowIn(pow);
};


/**
 * Creates a new createjs.Ease.PowOut instance. This method emulates the
 * createjs.Ease.getPowOut method of TweenJS.
 * @param {number} pow
 * @return {createjs.Ease.Delegate}
 */
createjs.Ease.getPowOut = function(pow) {
  return new createjs.Ease.PowOut(pow);
};

/**
 * Creates a new createjs.Ease.PowInOut instance. This method emulates the
 * createjs.Ease.getPowInOut method of TweenJS.
 * @param {number} pow
 * @return {createjs.Ease.Delegate}
 */
createjs.Ease.getPowInOut = function(pow) {
  return new createjs.Ease.PowInOut(pow);
};

/**
 * The global instance of the createjs.Ease.QuadInOut class. This property
 * emulates the createjs.Ease.quadInOut property of TweenJS.
 * @const {createjs.Ease.QuadIn}
 */
createjs.Ease.quadIn = new createjs.Ease.QuadIn();

/**
 * The global instance of the createjs.Ease.QuadOut class. This property
 * emulates the createjs.Ease.quadOut property of TweenJS.
 * @const {createjs.Ease.QuadOut}
 */
createjs.Ease.quadOut = new createjs.Ease.QuadOut();

/**
 * The global instance of the createjs.Ease.QuadInOut class. This property
 * emulates the createjs.Ease.quadInOut property of TweenJS.
 * @const {createjs.Ease.QuadInOut}
 */
createjs.Ease.quadInOut = new createjs.Ease.QuadInOut();

/**
 * The global instance of the createjs.Ease.CubicIn class. This property
 * emulates the createjs.Ease.cubicIn property of TweenJS.
 * @const {createjs.Ease.CubicIn}
 */
createjs.Ease.cubicIn = new createjs.Ease.CubicIn();

/**
 * The global instance of the createjs.Ease.CubicOut class. This property
 * emulates the createjs.Ease.cubiccOut property of TweenJS.
 * @const {createjs.Ease.CubicOut}
 */
createjs.Ease.cubicOut = new createjs.Ease.CubicOut();

/**
 * The global instance of the createjs.Ease.CubicInOut class. This property
 * emulates the createjs.Ease.cubicInOut property of TweenJS.
 * @const {createjs.Ease.CubicInOut}
 */
createjs.Ease.cubicInOut = new createjs.Ease.CubicInOut();

/**
 * The global instance of the createjs.Ease.QuartIn class. This property
 * emulates the createjs.Ease.quartIn property of TweenJS.
 * @const {createjs.Ease.QuartIn}
 */
createjs.Ease.quartIn = new createjs.Ease.QuartIn();

/**
 * The global instance of the createjs.Ease.QuartOut class. This property
 * emulates the createjs.Ease.quartOut property of TweenJS.
 * @const {createjs.Ease.QuartOut}
 */
createjs.Ease.quartOut = new createjs.Ease.QuartOut();

/**
 * The global instance of the createjs.Ease.QuartInOut class. This property
 * emulates the createjs.Ease.quartInOut property of TweenJS.
 * @const {createjs.Ease.QuartInOut}
 */
createjs.Ease.quartInOut = new createjs.Ease.QuartInOut();

/**
 * The global instance of the createjs.Ease.QuintIn class. This property
 * emulates the createjs.Ease.quintIn property of TweenJS.
 * @const {createjs.Ease.QuintIn}
 */
createjs.Ease.quintIn = new createjs.Ease.QuintIn();

/**
 * The global instance of the createjs.Ease.QuintOut class. This property
 * emulates the createjs.Ease.quintOut property of TweenJS.
 * @const {createjs.Ease.QuintOut}
 */
createjs.Ease.quintOut = new createjs.Ease.QuintOut();

/**
 * The global instance of the createjs.Ease.QuintInOut class. This property
 * emulates the createjs.Ease.quintInOut property of TweenJS.
 * @const {createjs.Ease.QuintInOut}
 */
createjs.Ease.quintInOut = new createjs.Ease.QuintInOut();

/**
 * The global instance of the createjs.Ease.SineIn class. This property emulates
 * the createjs.Ease.sineIn property of TweenJS.
 * @const {createjs.Ease.SineIn}
 */
createjs.Ease.sineIn = new createjs.Ease.SineIn();

/**
 * The global instance of the createjs.Ease.SineOut class. This property
 * emulates the createjs.Ease.sineOut property of TweenJS.
 * @const {createjs.Ease.SineOut}
 */
createjs.Ease.sineOut = new createjs.Ease.SineOut();

/**
 * The global instance of the createjs.Ease.SineInOut class. This property
 * emulates the createjs.Ease.sineInOut property of TweenJS.
 * @const {createjs.Ease.SineInOut}
 */
createjs.Ease.sineInOut = new createjs.Ease.SineInOut();

/**
 * Creates a new createjs.Ease.BackIn instance. This method emulates the
 * createjs.Ease.getBackIn method of TweenJS.
 * @param {number} amount
 * @return {createjs.Ease.BackIn}
 */
createjs.Ease.getBackIn = function(amount) {
  return new createjs.Ease.BackIn(amount);
};

/**
 * The global instance of the createjs.Ease.BackIn class. This property emulates
 * the createjs.Ease.backIn property of TweenJS.
 * @const {createjs.Ease.BackIn}
 */
createjs.Ease.backIn = new createjs.Ease.BackIn(1.7);

/**
 * Creates a new createjs.Ease.BackOut instance. This method emulates the
 * createjs.Ease.getBackOut method of TweenJS.
 * @param {number} amount
 * @return {createjs.Ease.BackOut}
 */
createjs.Ease.getBackOut = function(amount) {
  return new createjs.Ease.BackOut(amount);
};

/**
 * The global instance of the createjs.Ease.BackOut class. This property
 * emulates the createjs.Ease.backOut property of TweenJS.
 * @const {createjs.Ease.BackOut}
 */
createjs.Ease.backOut = new createjs.Ease.BackOut(1.7);

/**
 * Creates a new createjs.Ease.BackInOut instance. This method emulates the
 * createjs.Ease.getBackInOut method of TweenJS.
 * @param {number} amount
 * @return {createjs.Ease.BackInOut}
 */
createjs.Ease.getBackInOut = function(amount) {
  return new createjs.Ease.BackInOut(amount);
};

/**
 * The global instance of the createjs.Ease.BackInOut class. This property
 * emulates the createjs.Ease.backInOut property of TweenJS.
 * @const {createjs.Ease.BackInOut}
 */
createjs.Ease.backInOut = new createjs.Ease.BackInOut(1.7);

/**
 * The global instance of the createjs.Ease.CircIn class. This property emulates
 * the createjs.Ease.circIn property of TweenJS.
 * @const {createjs.Ease.CircIn}
 */
createjs.Ease.circIn = new createjs.Ease.CircIn();

/**
 * The global instance of the createjs.Ease.CircOut class. This property
 * emulates the createjs.Ease.circOut property of TweenJS.
 * @const {createjs.Ease.CircOut}
 */
createjs.Ease.circOut = new createjs.Ease.CircOut();

/**
 * The global instance of the createjs.Ease.CircInOut class. This property
 * emulates the createjs.Ease.circInOut property of TweenJS.
 * @const {createjs.Ease.CircInOut}
 */
createjs.Ease.circInOut = new createjs.Ease.CircInOut();

/**
 * The global instance of the createjs.Ease.BounceIn class. This property
 * emulates the createjs.Ease.bounceIn property of TweenJS.
 * @const {createjs.Ease.BounceIn}
 */
createjs.Ease.bounceIn = new createjs.Ease.BounceIn();

/**
 * The global instance of the createjs.Ease.BounceOut class. This property
 * emulates the createjs.Ease.bounceOut property of TweenJS.
 * @const {createjs.Ease.BounceOut}
 */
createjs.Ease.bounceOut = new createjs.Ease.BounceOut();

/**
 * The global instance of the createjs.Ease.BounceInOut class. This property
 * emulates the createjs.Ease.bounceInOut property of TweenJS.
 * @const {createjs.Ease.BounceInOut}
 */
createjs.Ease.bounceInOut = new createjs.Ease.BounceInOut();

/**
 * Creates a new createjs.Ease.ElasticIn instance. This method emulates the
 * createjs.Ease.getElasticIn method of TweenJS.
 * @param {number} amplitude
 * @param {number} period
 * @return {createjs.Ease.ElasticIn}
 */
createjs.Ease.getElasticIn = function(amplitude, period) {
  return new createjs.Ease.ElasticIn(amplitude, period);
};

/**
 * The global instance of the createjs.Ease.ElasticIn class with its amplitude 1
 * and period 0.3. This property emulates the createjs.Ease.elasticIn property
 * of TweenJS.
 * @const {createjs.Ease.ElasticIn}
 */
createjs.Ease.elasticIn = new createjs.Ease.ElasticIn(1, 0.3);

/**
 * Creates a new createjs.Ease.ElasticOut instance. This method emulates the
 * createjs.Ease.getElasticOut method of TweenJS.
 * @param {number} amplitude
 * @param {number} period
 * @return {createjs.Ease.ElasticOut}
 */
createjs.Ease.getElasticOut = function(amplitude, period) {
  return new createjs.Ease.ElasticOut(amplitude, period);
};

/**
 * The global instance of the createjs.Ease.ElasticOut class with its amplitude
 * 1 and period 0.3. This property emulates the createjs.Ease.elasticOut
 * property of TweenJS.
 * @const {createjs.Ease.ElasticOut}
 */
createjs.Ease.elasticOut = new createjs.Ease.ElasticOut(1, 0.3);

/**
 * Creates a new createjs.Ease.ElasticInOut instance. This method emulates the
 * createjs.Ease.getElasticInOut method of TweenJS.
 * @param {number} amplitude
 * @param {number} period
 * @return {createjs.Ease.ElasticInOut}
 */
createjs.Ease.getElasticInOut = function(amplitude, period) {
  return new createjs.Ease.ElasticInOut(amplitude, period);
};

/**
 * The global instance of the createjs.Ease.ElasticInOut class with its
 * amplitude 1 and period ~0.45. This property emulates the
 * createjs.Ease.elasticInOut property of TweenJS.
 * @const {createjs.Ease.ElasticInOut}
 * @deprecated
 */
createjs.Ease.elasticInOut = new createjs.Ease.ElasticInOut(1, 0.3 * 1.5);

/**
 * The all easing methods defined in the original CreateJS.
 * @const {Object.<string,Function>}
 * @private
 */
createjs.Ease.ALL_METHODS_ = {
  'linear': createjs.Ease.linear,
  'none': createjs.Ease.linear,
  'get': createjs.Ease.get,
  'getPowIn': createjs.Ease.getPowIn,
  'getPowOut': createjs.Ease.getPowOut,
  'getPowInOut': createjs.Ease.getPowInOut,
  'quadIn': createjs.Ease.quadIn,
  'quadOut': createjs.Ease.quadOut,
  'quadInOut': createjs.Ease.quadInOut,
  'cubicIn': createjs.Ease.cubicIn,
  'cubicOut': createjs.Ease.cubicOut,
  'cubicInOut': createjs.Ease.cubicInOut,
  'quartIn': createjs.Ease.quartIn,
  'quartOut': createjs.Ease.quartOut,
  'quartInOut': createjs.Ease.quartInOut,
  'quintIn': createjs.Ease.quintIn,
  'quintOut': createjs.Ease.quintOut,
  'quintInOut': createjs.Ease.quintInOut,
  'sineIn': createjs.Ease.sineIn,
  'sineOut': createjs.Ease.sineOut,
  'sineInOut': createjs.Ease.sineInOut,
  'getBackIn': createjs.Ease.getBackIn,
  'backIn': createjs.Ease.backIn,
  'getBackOut': createjs.Ease.getBackOut,
  'backOut': createjs.Ease.backOut,
  'getBackInOut': createjs.Ease.getBackInOut,
  'backInOut': createjs.Ease.backInOut,
  'circIn': createjs.Ease.circIn,
  'circOut': createjs.Ease.circOut,
  'circInOut': createjs.Ease.circInOut,
  'bounceIn': createjs.Ease.bounceIn,
  'bounceOut': createjs.Ease.bounceOut,
  'bounceInOut': createjs.Ease.bounceInOut,
  'getElasticIn': createjs.Ease.getElasticIn,
  'elasticIn': createjs.Ease.elasticIn,
  'getElasticOut': createjs.Ease.getElasticOut,
  'elasticOut': createjs.Ease.elasticOut,
  'getElasticInOut': createjs.Ease.getElasticInOut,
  'elasticInOut': createjs.Ease.elasticInOut
};

/**
 * The all easing methods defined in the original CreateJS.
 * @const {Object.<string,Function>}
 * @private
 */
createjs.Ease.MINIMAL_METHODS_ = {
  'linear': createjs.Ease.linear,
  'none': createjs.Ease.linear,
  'get': createjs.Ease.get,
  'quadIn': createjs.Ease.quadIn,
  'quadOut': createjs.Ease.quadOut,
  'quadInOut': createjs.Ease.quadInOut,
  'cubicIn': createjs.Ease.cubicIn,
  'cubicOut': createjs.Ease.cubicOut,
  'cubicInOut': createjs.Ease.cubicInOut
};

/**
 * A table of exported functions.
 * @type {Object}
 * @const
 */
createjs.Ease.exports =
    createjs.exportStatic('createjs.Ease', createjs.Ease.MINIMAL_METHODS_);

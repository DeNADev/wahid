/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 DeNA Co., Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/// <reference path="base.js"/>
/// <reference path="event.js"/>

/**
 * A class encapsulating pointer events, i.e. mouse events, pointer events, and
 * touch events. For a listing of mouse events and their properties, see the
 * DisplayObject and Stage event listings.
 * @param {string} type
 * @param {boolean} bubbles
 * @param {boolean} cancelable
 * @param {number} stageX
 * @param {number} stageY
 * @param {Object} nativeEvent
 * @param {number} pointerID
 * @param {boolean} primary
 * @param {number} rawX
 * @param {number} rawY
 * @extends {createjs.Event}
 * @constructor
 */
createjs.MouseEvent = function(type,
                               bubbles,
                               cancelable,
                               stageX,
                               stageY,
                               nativeEvent,
                               pointerID,
                               primary,
                               rawX,
                               rawY) {
  createjs.Event.call(this, type, bubbles, cancelable);

  /**
   * The normalized x position on the stage.
   * @type {number}
   */
  this['stageX'] = stageX;

  /**
   * The normalized y position on the stage.
   * @type {number}
   */
  this['stageY'] = stageY;

  /**
   * The native MouseEvent generated by the browser. The properties and API for
   * this event may differ between browsers. This property will be null if the
   * EaselJS property was not directly generated from a native MouseEvent.
   * @type {Object}
   */
  this['nativeEvent'] = nativeEvent;

  /**
   * The unique id for the pointer (touch point or cursor). This will be either
   * -1 for the mouse, or the system supplied id value.
   * @type {number}
   */
  this['pointerID'] = pointerID;

  /**
   * Indicates whether this is the primary pointer in a multi-touch environment.
   * This will always be true for the mouse. For touch pointers, the first
   * pointer in the current stack will be considered the primary pointer.
   * @type {boolean}
   */
  this['primary'] = primary;

  /**
   * The raw x position relative to the stage.
   * outside of the stage bounds.
   * @type {number}
   */
  this['rawX'] = rawX;

  /**
   * The raw y position relative to the stage.
   * @type {number}
   */
  this['rawY'] = rawY;
};
createjs.inherits('MouseEvent', createjs.MouseEvent, createjs.Event);

/**
 * Resets this event.
 * @param {Object} nativeEvent
 * @param {number} pointerID
 * @const
 */
createjs.MouseEvent.prototype.reset = function(nativeEvent, pointerID) {
  /// <param type="Object" name="nativeEvent"/>
  /// <param type="number" name="pointerID"/>
  this['nativeEvent'] = nativeEvent;
  this['pointerID'] = pointerID;
};

/**
 * Sets the 'stageX' value of this object and its 'stageY' value.
 * @param {number} stageX
 * @param {number} stageY
 * @const
 */
createjs.MouseEvent.prototype.setStage = function(stageX, stageY) {
  /// <param type="number" name="stageX"/>
  /// <param type="number" name="stageY"/>
  this['stageX'] = stageX;
  this['stageY'] = stageY;
};

/**
 * Sets the 'primary' value of this object.
 * @param {boolean} primary
 * @const
 */
createjs.MouseEvent.prototype.setPrimary = function(primary) {
  /// <param type="boolean" name="primary"/>
  this['primary'] = primary;
};

/**
 * Sets the 'rawX' value of this object and its 'rawY' value.
 * @param {number} rawX
 * @param {number} rawY
 * @const
 */
createjs.MouseEvent.prototype.setRaw = function(rawX, rawY) {
  /// <param type="number" name="rawX"/>
  /// <param type="number" name="rawY"/>
  this['rawX'] = rawX;
  this['rawY'] = rawY;
};
